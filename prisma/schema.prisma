generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @default(now()) @db.Date
  likes     Int      @default(0)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  // Cascade delete when deal is deleted
  dealId String? @db.ObjectId
  deal   Deal?   @relation(fields: [dealId], references: [id], onDelete: Cascade)

  // Cascade delete when discussion is deleted
  discussionId String?     @db.ObjectId
  discussion   Discussion? @relation(fields: [discussionId], references: [id], onDelete: Cascade)
}

model Deal {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  slug           String    @unique
  title          String
  text           String
  url            String?
  isLocale       Boolean   @default(false)
  image          String
  price          Int       @default(0)
  currency       Currency? @default(MAD)
  oldPrice       Int?
  votes          Int       @default(0)
  commentsCount  Int       @default(0)
  comments       Comment[]
  createdAt      DateTime  @default(now()) @db.Date
  updatedAt      DateTime  @default(now()) @db.Date
  startAt        DateTime  @default(now()) @db.Date
  expireAt       DateTime? @db.Date
  isFreeDelivery Boolean?
  delivery       Int?
  codePromo      String?
  merchantId     String?
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id])

  @@fulltext([text, title], map: "text_text_title_text")
}

model Discussion {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  text          String
  slug          String?
  image         String?
  commentsCount Int       @default(0)
  votes         Int       @default(0)
  comments      Comment[]
  createdAt     DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @default(now()) @db.Date
  merchantId    String?
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])

  @@fulltext([text, title], map: "text_text_title_text")
  @@map("discussions")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  votesUp       String[]     @default([])
  votesDown     String[]     @default([])
  commentsLiked String[]     @default([])
  isVerified    Boolean      @default(false)
  deals         Deal[]
  discussions   Discussion[]
  comments      Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

enum Currency {
  EUR
  USD
  GBP
  MAD
}
